# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    tags: ['v[0-9].[0-9]+.[0-9]+']

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Test
        run: go test -v ./...

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Install checkers
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest;
          go install golang.org/x/vuln/cmd/govulncheck@latest
      
      - name: Run GoSec
        run: gosec ./...
      
      - name: Run govulncheck
        run: govulncheck ./...

  build:
    needs: security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Build app
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -v ./...

  create_release:
    needs: build
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{steps.create_release.outputs.upload_url}}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  release_assets:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Archive application
        run: zip --junk-paths tacs-amd64.zip LICENSE README.* tacs
      
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: tacs-amd64
          asset_content_type: application/zip
          asset_path: ./tacs-amd64.zip